/**
 * Do NOT modify manually.
 * This code is autogenerated using /src/main/gen_p4.go using the template in final_p4.tmpl.
 * Any changes you wish to make should be made to final_p4.tmpl.
 */

#include <core.p4>
#include <v1model.p4>

// This program processes packets composed of an Ethernet and
// an IPv4 header, performing forwarding based on the
// destination IP address

typedef bit<48>  EthernetAddress;
typedef bit<32>  IPv4Address;

// standard Ethernet header
header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

// IPv4 header without options
header ipv4_t {
    bit<4>       version;
    bit<4>       ihl;
    bit<8>       diffserv;
    bit<16>      packet_length;
    bit<16>      identification;
    bit<3>       flags;
    bit<13>      fragOffset;
    bit<8>       ttl;
    bit<8>       protocol;
    bit<16>      hdrChecksum;
    IPv4Address  srcAddr;
    IPv4Address  dstAddr;
}

header tcp_t {
    bit<16> srcport;
    bit<16> dstport;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

header udp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<16> length_;
    bit<16> checksum;
}

// Parser section

// List of all recognized headers
struct Headers {
    ethernet_t ethernet;
    ipv4_t     ip;
    tcp_t tcp;
    udp_t udp;
}

struct queueing_metadata_t {
    bit<48> enq_timestamp;
    bit<16> enq_qdepth;
    bit<32> deq_timedelta;
    bit<16> deq_qdepth;
}

struct intrinsic_metadata_t {
    bit<48> ingress_global_timestamp;
    bit<8> lf_field_list;
    bit<16> mcast_grp;
    bit<16> egress_rid;
    bit<8> resubmit_flag;
    bit<8> recirculate_flag;
}
    
struct CommonMetadata { 
    bit<32> dstport;
    bit<32> payload_length;
    bit<32> egress_timestamp;
    bit<32> switchId;
    bit<32> srcport;
    bit<32> pktpath;
}

struct QueryMetadata { 
    bit<32> last_time;
    bit<32> total_size;
    bit<32> num_bursts;
    bit<32> total_time;
    bit<1> _result_valid;
}


struct Key_result {
	bit<32> f0;
	bit<32> f1;
	bit<32> f2;
	bit<32> f3;
	bit<32> f4;
	bit<32> f5;
}

struct Value_result {
	bit<32> last_time;
	bit<32> total_size;
	bit<32> total_time;
	bit<32> num_bursts;
}


struct Metadata {
    QueryMetadata query_meta;
    // The structs below are read only.
    CommonMetadata common_meta;
    @name("intrinsic_metadata")
    intrinsic_metadata_t intrinsic_metadata;
    @name("queueing_metadata")
    queueing_metadata_t queueing_metadata; 
}

parser P(packet_in b,
         out Headers p,
         inout Metadata meta,
         inout standard_metadata_t standard_meta) {
    state start {
        b.extract(p.ethernet);
        transition select(p.ethernet.etherType) {
            0x0800 : parse_ipv4;
            // no default rule: all other packets rejected
        }
    }

    state parse_ipv4 {
        b.extract(p.ip);
        transition select(p.ip.protocol) {
            8w0x6: parse_tcp;
            8w0x11: parse_udp;
            default: accept;
        }
    }

    state parse_tcp {
        b.extract(p.tcp);
        transition accept;
    }

    state parse_udp {
        b.extract(p.udp);
        transition accept;
    }
}

// match-action pipeline section

control Ing(inout Headers headers,
            inout Metadata meta,
            inout standard_metadata_t standard_meta) {

    /**
     * Indicates that a packet is dropped by setting the
     * output port to the DROP_PORT
     */
    action Drop_action() {
        standard_meta.drop = 1w1;
    }

    /**
     * Set the next hop and the output port.
     * @param ivp4_dest ipv4 address of next hop
     * @param port output port
     */
    action Set_nhop(out IPv4Address nextHop,
                    IPv4Address ipv4_dest,
                    bit<9> outPort) {
        nextHop = ipv4_dest;
        standard_meta.egress_spec = outPort;
    }

    /**
     * Computes address of next Ipv4 hop and output port
     * based on the Ipv4 destination of the current packet.
     * Decrements packet Ipv4 TTL.
     * @param nextHop Ipv4 address of next hop
     */
    table ipv4_match(out IPv4Address nextHop) {
        key = { headers.ip.dstAddr : lpm; }
        actions = {
            Drop_action;
            Set_nhop(nextHop);
        }

        size = 1024;
        default_action = Drop_action;
    }

    //table check_ttl() {
    //    key = { headers.ip.ttl : exact; }
    //    actions = { Drop_action; NoAction; }
    //    const default_action = NoAction;
    //}

    /**
     * Set the destination MAC address of the packet
     * @param dmac destination MAC address.
     */
    action Set_dmac(EthernetAddress dmac) {
        headers.ethernet.dstAddr = dmac;
    }
    
    /**
     * Set the destination Ethernet address of the packet
     * based on the next hop IP address.
     * @param nextHop Ipv4 address of next hop.
     */
    table dmac(in IPv4Address nextHop) {
       key = { nextHop : exact; }
       actions = {
            Drop_action;
            Set_dmac;
       }
       size = 1024;
       default_action = Drop_action;
   }

   /**
    * Set the source MAC address.
    * @param smac: source MAC address to use
    */
    action Set_smac(EthernetAddress smac)
       { headers.ethernet.srcAddr = smac; }

      /**
       * Set the source mac address based on the output port.
       */
      table smac() {
           key = { standard_meta.egress_port : exact; }
           actions = {
                Drop_action;
                Set_smac;
          }
          size = 16;
          default_action = Drop_action;
      }

    apply {
        IPv4Address nextHop;
        ipv4_match.apply(nextHop); // Match result will go into nextHop
        dmac.apply(nextHop);
        smac.apply();
    }
}

control Eg(inout Headers hdrs,
           inout Metadata meta,
           inout standard_metadata_t standard_meta) {
    
    
    
    register<bit<32>>(32w1024) regK_result_f0;
    register<bit<32>>(32w1024) regK_result_f1;
    register<bit<32>>(32w1024) regK_result_f2;
    register<bit<32>>(32w1024) regK_result_f3;
    register<bit<32>>(32w1024) regK_result_f4;
    register<bit<32>>(32w1024) regK_result_f5;
    
    register<bit<32>>(32w1024) regV_result_last_time;
    register<bit<32>>(32w1024) regV_result_total_size;
    register<bit<32>>(32w1024) regV_result_total_time;
    register<bit<32>>(32w1024) regV_result_num_bursts;

    // Using register regKeys, regValues.
    action groupby_result(inout Key_result evictedKey, inout Value_result evictedValue) {
        Value_result defaultVal_result = {0,0,0,0};
        Key_result defaultKey_result = {0,0,0,0,0,0};
        evictedKey = {0,0,0,0,0,0};
        evictedValue = {0,0,0,0};
        Key_result inKey = {0,0,0,0,0,0};
        
        bit<32> _inKey_f0 = hdrs.ip.srcAddr;
        inKey.f0 = hdrs.ip.srcAddr;
        bit<32> _inKey_f1 = hdrs.ip.dstAddr;
        inKey.f1 = hdrs.ip.dstAddr;
        bit<32> _inKey_f2 = meta.common_meta.srcport;
        inKey.f2 = meta.common_meta.srcport;
        bit<32> _inKey_f3 = meta.common_meta.dstport;
        inKey.f3 = meta.common_meta.dstport;
        bit<32> _inKey_f4 = (bit<32>)hdrs.ip.protocol;
        inKey.f4 = (bit<32>)hdrs.ip.protocol;
        bit<32> _inKey_f5 = meta.common_meta.switchId;
        inKey.f5 = meta.common_meta.switchId;
        
        bit<32> _foundKey_f0 = 0;
        bit<32> _foundKey_f1 = 0;
        bit<32> _foundKey_f2 = 0;
        bit<32> _foundKey_f3 = 0;
        bit<32> _foundKey_f4 = 0;
        bit<32> _foundKey_f5 = 0;

        bit<32> hsh = 32w1;
        hash(hsh, HashAlgorithm.crc32, 32w0, inKey, 32w1024);
        
        bit<32> _foundValue_last_time = 0;
        bit<32> _foundValue_total_size = 0;
        bit<32> _foundValue_total_time = 0;
        bit<32> _foundValue_num_bursts = 0;
        
        regK_result_f0.read(_foundKey_f0, hsh);
        regK_result_f1.read(_foundKey_f1, hsh);
        regK_result_f2.read(_foundKey_f2, hsh);
        regK_result_f3.read(_foundKey_f3, hsh);
        regK_result_f4.read(_foundKey_f4, hsh);
        regK_result_f5.read(_foundKey_f5, hsh);
        
        regV_result_last_time.read(_foundValue_last_time, hsh);
        regV_result_total_size.read(_foundValue_total_size, hsh);
        regV_result_total_time.read(_foundValue_total_time, hsh);
        regV_result_num_bursts.read(_foundValue_num_bursts, hsh);
        bool same = true;
        same = (_foundKey_f0 == _inKey_f0) ? same : false;
        same = (_foundKey_f1 == _inKey_f1) ? same : false;
        same = (_foundKey_f2 == _inKey_f2) ? same : false;
        same = (_foundKey_f3 == _inKey_f3) ? same : false;
        same = (_foundKey_f4 == _inKey_f4) ? same : false;
        same = (_foundKey_f5 == _inKey_f5) ? same : false;
        bool zero = true;
        zero = (_foundKey_f0 == 0) ? zero : false;
        zero = (_foundKey_f1 == 0) ? zero : false;
        zero = (_foundKey_f2 == 0) ? zero : false;
        zero = (_foundKey_f3 == 0) ? zero : false;
        zero = (_foundKey_f4 == 0) ? zero : false;
        zero = (_foundKey_f5 == 0) ? zero : false;
        
        Value_result val = {0,0,0,0};
        bool ok = same || zero;
        // Should be shortened to evictedKey = !ok ? foundKey : 0 when supported.
        
        evictedKey.f0 = !ok ? _foundKey_f0 : 0;
        evictedKey.f1 = !ok ? _foundKey_f1 : 0;
        evictedKey.f2 = !ok ? _foundKey_f2 : 0;
        evictedKey.f3 = !ok ? _foundKey_f3 : 0;
        evictedKey.f4 = !ok ? _foundKey_f4 : 0;
        evictedKey.f5 = !ok ? _foundKey_f5 : 0;
        
        evictedValue.last_time = !ok ? _foundValue_last_time : 0;
        evictedValue.total_size = !ok ? _foundValue_total_size : 0;
        evictedValue.total_time = !ok ? _foundValue_total_time : 0;
        evictedValue.num_bursts = !ok ? _foundValue_num_bursts : 0;
        
        bit<32> _val_last_time = ok ? _foundValue_last_time : 0;
        bit<32> _val_total_size = ok ? _foundValue_total_size : 0;
        bit<32> _val_total_time = ok ? _foundValue_total_time : 0;
        bit<32> _val_num_bursts = ok ? _foundValue_num_bursts : 0;
        // Preamble
		bool _tmp_result_valid;
		// Function body
		bool _pred_1;
		bit<32> delta;
		bool _pred_2;
		bool _pred_3;
		bool _pred_4;
		bit<32> _total_size_a;
		bit<32> _total_size_b;
		bit<32> _num_bursts_a;
		bit<32> _num_bursts_b;
		_tmp_result_valid = false;
		_num_bursts_a = 32w1;
		_num_bursts_b = 32w0;
		_total_size_a = 32w1;
		_total_size_b = 32w0;
		_pred_1 = true;
		delta = 32w800000;
		_pred_2 = (((bit<32>)meta.queueing_metadata.enq_timestamp)-(_val_last_time)) > (delta);
		_pred_3 = (_pred_1) && (_pred_2);
		_num_bursts_a = _pred_3 ? ((_num_bursts_a)*(32w1)) : (_num_bursts_a);
		_num_bursts_b = _pred_3 ? ((32w1)+((32w1)*(_num_bursts_b))) : (_num_bursts_b);
		_pred_4 = (_pred_1) && (! (_pred_2));
		_val_total_time = _pred_4 ? (((_val_total_time)+((bit<32>)meta.queueing_metadata.enq_timestamp))-(_val_last_time)) : (_val_total_time);
		_total_size_a = (_total_size_a)*(32w1);
		_total_size_b = (32w1)+((32w1)*(_total_size_b));
		_val_last_time = (bit<32>)meta.queueing_metadata.enq_timestamp;
		_val_total_size = ((_total_size_a)*(_val_total_size))+(_total_size_b);
		_val_num_bursts = ((_num_bursts_a)*(_val_num_bursts))+(_num_bursts_b);
		// Postamble
		meta.query_meta._result_valid = _tmp_result_valid ? (1w1) : (1w0);

        
        regK_result_f0.write(hsh, _inKey_f0);
        regK_result_f1.write(hsh, _inKey_f1);
        regK_result_f2.write(hsh, _inKey_f2);
        regK_result_f3.write(hsh, _inKey_f3);
        regK_result_f4.write(hsh, _inKey_f4);
        regK_result_f5.write(hsh, _inKey_f5);
        
        regV_result_last_time.write(hsh, _val_last_time);
        regV_result_total_size.write(hsh, _val_total_size);
        regV_result_total_time.write(hsh, _val_total_time);
        regV_result_num_bursts.write(hsh, _val_num_bursts);
    }

    register<bit<32>>(32w100) debug; 

    apply {
        meta.common_meta.switchId = 1;
        meta.common_meta.payload_length = hdrs.tcp.isValid() ? (bit<32>)hdrs.ip.packet_length - (bit<32>)hdrs.tcp.dataOffset : (bit<32>)hdrs.udp.length_;
        meta.common_meta.egress_timestamp = meta.queueing_metadata.enq_timestamp[31:0] + (bit<32>)meta.queueing_metadata.deq_timedelta;
        meta.common_meta.pktpath = 0;
        meta.common_meta.srcport = hdrs.tcp.isValid() ? (bit<32>)hdrs.tcp.srcport : 0;
        meta.common_meta.srcport = (hdrs.udp.isValid() && !hdrs.tcp.isValid()) ? (bit<32>)hdrs.udp.srcPort : meta.common_meta.srcport;
        meta.common_meta.dstport = hdrs.tcp.isValid() ? (bit<32>)hdrs.tcp.dstport : 0;
        meta.common_meta.dstport = (hdrs.udp.isValid() && !hdrs.tcp.isValid()) ? (bit<32>)hdrs.udp.dstPort : meta.common_meta.dstport;
        
        bit<32> idx = hdrs.tcp.isValid() ? 32w1 : 32w0;
        bit<32> subj = hdrs.tcp.isValid() ? (bit<32>)hdrs.tcp.srcport : (bit<32>)hdrs.udp.srcPort;
        debug.write(idx, subj);

		Key_result evictedKey_result;
		Value_result evictedValue_result;
		groupby_result(evictedKey_result, evictedValue_result);
        
    }
}

// deparser section
control DP(packet_out b, in Headers p) {
    apply {
        b.emit(p.ethernet);
        b.emit(p.ip);
        b.emit(p.tcp);
        b.emit(p.udp);
    }
}

// Fillers
control Verify(in Headers hdrs, inout Metadata meta) {
    apply {}
}

control Compute(inout Headers hdr, inout Metadata meta) {
    apply {}
}

// Instantiate the top-level V1 Model package.
V1Switch(P(),
         Verify(),
         Ing(),
         Eg(),
         Compute(),
         DP()) main;
